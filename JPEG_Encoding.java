import java.io.*;
import java.awt.*;
import javax.swing.*;
import java.text.DecimalFormat;

public class JPEG_Encoding
{
 
 public JPEG_Encoding()
 
 {
 	
  double matrix [][]={
  	      
  	      {52,55,61,66,70,61,64,73},  	      
  	      {63,59,66,90,109,85,69,72},  	      
  	      {62,59,68,113,144,104,66,73},  	      
  	      {63,58,71,122,154,106,70,69},  	      
  	      {67,61,68,104,126,88,68,70},  	      
  	      {79,65,60,70,77,63,58,75},     
          {85,71,64,59,55,61,65,83},
  	      {87,79,69,68,65,76,78,94}
  	      
       };
      System.out.println("                             *WELCOME TO JPEG ENCODING*            ");   
      System.out.println(" Matrix is :");
      show(matrix);     
      
//''''''''''''''''''''''''''''''''''''''''''''''''Tables'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''// 
  double Quantization_table[][]={
  	                             
  	      {16,11,10,16,24,40,51,61},  	      
  	      {12,12,14,19,26,58,60,55},  	      
  	      {14,13,16,24,40,57,69,56},  	      
  	      {14,17,22,29,51,87,80,62},  	      
  	      {18,22,37,56,68,109,103,77},  	      
  	      {24,35,55,64,81,104,113,92},	      
          {49,61,78,87,103,121,120,101},
  	      {72,92,95,98,112,100,103,99}
       };
       
  /////////////////////////////////////////////////skip/sss tabel//////////////////////////////////////////////////
  String skip_sss[][]={
  	                   
  	                   {"1010","00","01","100","1011","11010","111000","1111000","1111110110","1111111110000010","1111111110000011"},  	                   
  	                   {"","1100","111001","1111001","111110110","1111111010","111111110000101","1111111110000101","1111111110000110","1111111110000111","1111111110001000"},  	                   
  	                   {"","11011","11111000","1111110111","1111111110001001","1111111110001010","1111111110001011","1111111110001100","1111111110001101","1111111110001110","1111111110001111"},  	                   
  	                   {"","111010","111110111","11111110111","1111111110010000","1111111110010001","1111111110010010","1111111110010011","1111111110010100","1111111110010101","1111111110010110"},  	                   
  	                   {"","111011","1111111000","1111111110010111","1111111110011000","1111111110011001","111111111001101","1111111110011011","111111111001110","1111111110011101","1111111110011110"},  	                   
  	                   {"","1111010","1111111001","1111111110011111","1111111110100000","1111111110100001","1111111110100010","11111111100011","1111111110100100","1111111110100101","1111111110100110"},  	                   
  	                   {"","1111011","11111111000","1111111110100111","1111111110101000","1111111110101001","1111111110101010","1111111110101011","1111111110101100","1111111110101101","1111111110101110"},  	                   
  	                   {"","11111001","11111111001","1111111110101111","1111111110110000","1111111110110001","1111111110110010","1111111110110011","1111111110110100","111111110110101","1111111110110110"},  	                   
  	                   {"","11111010","111111111000000","1111111101110111","1111111110111000","1111111110111001","1111111110111010","1111111110111011","1111111110111100","1111111110111101","11111111011110"},  	                   
  	                   {"","111111000","1111111110111111","1111111111000000","1111111111000001","1111111111000010","1111111111000011","1111111111000100","1111111111000101","1111111111000110","1111111111000111"},  	                   
  	                   {"","111111001","1111111111001000","1111111111001001","1111111111001010","1111111111001011","1111111111001100","1111111111001101","1111111111001110","1111111111001111","1111111111010000"},  	                   
  	                   {"","111111010","1111111111010001","1111111111010010","1111111111010011","1111111111010100","1111111111010101","1111111111010110","1111111111010111","1111111111011000","1111111111011001"},  	                   
  	                   {"","111111010","1111111111011010","1111111111011011","1111111111011100","1111111111011101","111111111101110","1111111111011111","11111111111000000","1111111111100001","1111111111100010"},  	                   
  	                   {"","11111111010","1111111111100011","1111111111100100","1111111111100101","1111111111100110","1111111111100111","1111111111101000","1111111111101001","1111111111101010","1111111111101011"},  	                   
  	                   {"","111111110110","1111111111101100","1111111111101101","1111111111101110","1111111111101111","111111111110000","111111111110001","1111111111110010","1111111111110011","111111111110100"},  	                   
  	                   {"111111110111","1111111111110101","1111111111110110","1111111111110111","1111111111111000","1111111111111001","1111111111111010","111111111111011","111111111111100","111111111111101","1111111111111110"}
  	
  	                  };
  	                   
  /////////////////////////////////////////////sss table///////////////////////////////////////////////////////////////////////     
  
  String sss[]=        {"010","011","100","00","101","110","1110","11110","111110","1111110","11111110","111111110"};
                 
  	                                 
       
       
 //----------------------------------------Encoding steps---------------------------------------------------------------//
   try{ 
    //1- subtract 128 from the values in the matrix
    double subed_matrix [][]=sub_128(matrix);  
    System.out.println(" Subed Matrix is :");
    show(subed_matrix); 
    
    //2- Apply Forward DCT     
    double transformed_matrix [][]=DCT(subed_matrix);
    System.out.println(" Transformed Matrix is :");
    show(transformed_matrix);
        
    //3-Quantization stage
    double Quantized_matrix[][]=Quantization(transformed_matrix,Quantization_table);     
    System.out.println(" Quantized Matrix is :");	    
    show(Quantized_matrix);
 
     //4-Vactoring of Quantized_matrix
     int vector[]=vectoring(Quantized_matrix);
   
     //5-Entropy Encoding	
     Entropy_Encoding(vector,sss,skip_sss);
    }
    
    catch(FileNotFoundException ex)
    {
     System.out.println("File Not Found ");		
    }
    
    catch(IOException ex)
    {
    		
    }
    
     
 }
 
 
 
/*.................................................Functions.............................................................*/ 
 
 
 /////////////////////////////////////subtract 128//////////////////////////////////////////////
 
 public double [][] sub_128(double a[][])
 {
 	
  for(int i=0;i<a.length;i++)	
   for(int j=0;j<a[0].length;j++)
   {   	
    a[i][j]=a[i][j]-128;   	
   }
   
   return a;
 	
 }
 
 /////////////////////////////////////Forward DCT//////////////////////////////////////////////
 public double [][] DCT (double a[][])
 {
 	
  
  double result [][] =new double[8][8]; 	
  double C_i=0;
  double C_j=0;
  
  double x1=0;
  double x2=0;
    
  double rows=0;
  
  //apply the transformation
  for(int i=0;i<result.length;i++)
   for(int j=0;j<result[0].length;j++)
   {
    
    if((i==0))     
    {
     C_i=1/(Math.sqrt(2));
     
    } 
    
    else
    {
      C_i=1;
    }
    
    if((j==0))     
    {
     
     C_j=1/(Math.sqrt(2));
    } 
    
    else
    {
      C_j=1;
    }
   	
   	for(int x=0;x<a.length;x++)
   	{ 
   	 for(int y=0;y<a[0].length;y++)
   	 {
   	  x1=Math.cos(( ((2*x)+1) * (i*Math.PI) )/16);
   	  x2=Math.cos(( ((2*y)+1) * (j*Math.PI) )/16);
   	  
   	  rows+=a[x][y]*x1*x2;	
   	 	
   	 }	 
   	 
    }
    
    result[i][j]=Math.round(((C_i*C_j)/4)*rows);
    rows=0;
    C_i=0;
    C_j=0;
  }
  
  return result;
 	
 }
 
 
/////////////////////////////////////Quantization////////////////////////////////////////////
 public double [][] Quantization (double a[][],double q[][])
 {
 	
  double result [][]=new double [8][8];	
  
  for (int i=0;i<result.length;i++)	
   for(int j=0;j<result[0].length;j++)    
     result[i][j]=Math.round(a[i][j]/q[i][j]);    
     
  return result;	
 }
 
/////////////////////////////////////Vectoring////////////////////////////////////////////
  public int  [] vectoring (double a [][])
  {   
    int index=0;
    int vector []=new int[64];   
    vector[0]=(int)a[0][0];
    vector[63]=(int)a[7][7];
   
       
    int x=0;
    int y=1;
    int countx=2;
    int county=3;
    
    /////////upper half///////////////////
    for(int i=1;i<36;i++)
    { 
      if(x==0)
      {
       
       while(y!=-1)
       {
        vector[i]=(int)a[x][y];
        x++;
        y--;
        i++;
       }	
       i--;
         
       x=countx;
       countx=countx+2;
       y=0;
       
      }
      
      else if(y==0)
      {
      	while(x!=-1)
        {
         vector[i]=(int)a[x][y];
         x--;
         y++;
         i++;
        }	
        i--;
        
        y=county;
        county=county+2;
        x=0;		
      }
         	
    }
    ///////////lower half///////////////////
    x=7;
    y=1;
    countx=2;
    county=3;
    for(int i=36;i<vector.length-1;i++)
    {
     
     if(x==7)
     {
      
      while(y!=8)
      {
        vector[i]=(int)a[x][y];
        x--;
        y++;
        i++;     	
      }
      
      i--;
      x=countx;
      countx=countx+2;	
      y=7;	
     	
     }
     
     else if(y==7)
     {
     	
      while(x!=8)
      {
       	vector[i]=(int)a[x][y];
        x++;
        y--;
        i++;      	
      }
      
      i--;
      y=county;
      county=county+2;
      x=7;	
     	
     }
     	
    	
    }
    
    System.out.println();
    System.out.println(" Vector is:");
    System.out.println();
    for(int i=0;i<vector.length;i++)
        System.out.print( vector[i]+" "); 
    System.out.println();
    
       
  	return vector;
  }
   
  
/////////////////////////////////////Entropy Encoding////////////////////////////////////////////
   public void Entropy_Encoding (int vector[],String sss_table[],String skip_sss[][]) throws FileNotFoundException,IOException
   {
   	 
   	 String Encode_Stream=DC_Encoding(vector[0],sss_table); 	 
   	 String value="";
   	 String temp=""; 
   	 int skip=0;
   	 int sss=0;
   	 char arr[];
   	 
   	 //Apply Run length   	 
   	 for(int i=1;i<vector.length;i++)
   	 {
   	    if(vector[i]==0)
   	     skip++;
   	    
   	     /////////////////////////////////////////////////////////////////////////
   	     else if(vector[i]!=0) 
   	     {
   	  	
   	       if(vector[i]<0)   	   
   	       {   	   
   	         vector[i]=vector[i]*-1;
   	         value=Integer.toBinaryString(vector[i]);   	    

   	         //convert to array for 1's complement
   	         arr=value.toCharArray();   	    
   	         value="";
   	   
   	         for(int j=0;j<arr.length;j++)
   	         { 
   	   	       if(arr[j]=='0')
   	   	        arr[j]='1';
   	   	   
   	   	       else    	   	   
   	            arr[j]='0';
   	         }
   	      	   
   	        //convert again to string
   	        for(int y=0;y<arr.length;y++)
   	        {   	   	
   	   	     value+=arr[y];   	   	
   	        }    	   
   	     	 	
   	       }//if
   	 
   	      //if value postive number
   	      else if(vector[i]>=0)
   	      {   	  	   	   
   	       value=Integer.toBinaryString(vector[i]);   	    	
   	      } 
   	     
   	      sss=value.length();
   	      temp+=skip_sss[skip][sss]+value;
   	     
   	      skip=0;	
   	  	
   	    } //else if  
   	  
   }
    
    Encode_Stream+=temp+skip_sss[0][0]; 
   
    System.out.println();
    System.out.println(" Stream of Bits is:"+"\n");  	 
   	System.out.println(Encode_Stream+"\n");   	
   	
   	convert(Encode_Stream); 	
   
}


   
///////////////////////////////////////DC_Encoding//////////////////////////////////////////////
   public String DC_Encoding(int DC,String t [])
   {   	
   	 String DC_Binary="";
   	 String DC_stream="";
   	 char DC_arr[];
   	 int sss=0;  //sss as decimal
   	 
   	 //if DC negative number
   	 if(DC<0)
   	 {   	   
   	    DC=DC*-1;
   	    DC_Binary=Integer.toBinaryString(DC);   	    

   	    //convert to array for 1's complement
   	    DC_arr=DC_Binary.toCharArray();   	    
   	    DC_Binary="";
   	   
   	    for(int i=0;i<DC_arr.length;i++)
   	    {
   	   	 if(DC_arr[i]=='0')
   	   	   DC_arr[i]='1';
   	   	   
   	   	  else    	   	   
   	       DC_arr[i]='0';
   	    }
   	      	   
   	   //convert again to string
   	   for(int i=0;i<DC_arr.length;i++)
   	   {   	   	
   	   	DC_Binary+=DC_arr[i];   	   	
   	   }    	   
   	     	 	
   	  }
   	 
   	  //if DC postive number
   	  else if(DC>0)
   	  {   	  	   	   
   	    DC_Binary=Integer.toBinaryString(DC);   	    	
   	  }   
    
     //calculate sss of CD
     sss=DC_Binary.length();
     DC_stream=t[sss]+DC_Binary;    
          
   	 return DC_stream;
}

/////////////////////////////////////Convert to Bytes////////////////////////////////////////////
public void convert (String stream) throws FileNotFoundException,IOException

{
   DataOutputStream output=new DataOutputStream(new FileOutputStream("bytes.txt"));   
   int binary=0;
   String temp="";
   String extra="";
   
   for(int i=0;i<stream.length();i++)
   {    	
   	 temp+=stream.charAt(i);   	 
   	 if(temp.length()==8)
   	 {
   	   for(int j=0;j<temp.length();j++)
   	    if(temp.charAt(j)=='1')   	     
   	      binary+=(int)Math.pow(2,7-j);  	    
   	   
   	  /*System.out.println(binary);
   	   System.out.println(temp);*/ 	  
   	   output.write(binary);
   	   binary=0;
   	   temp="";  	 
     }
   }
   
   if((stream.length()%8)!=0)
   {
     int length=stream.length()%8;
     binary=0;
     for(int i=stream.length()-(stream.length()%8);i<stream.length();i++)
       extra+=stream.charAt(i);
      	
     for(int j=0;j<extra.length();j++)
     {
       if(extra.charAt(j)=='1')
   	    binary+=(int)Math.pow(2,extra.length()-1-j);	 
   	 }
   	
   	 output.write('*');
   	 output.write(length); 
   	 output.write(binary);
   	
   }
   
   output.close();
   
	
}

 //////////////////////////////////show///////////////////////////////////////////////////
 public void show (double a[][])
 {
 	DecimalFormat d = new DecimalFormat("#,###,##0");
 	System.out.println();
 	for(int i=0;i<a.length;i++)	
    {
     for(int j=0;j<a[0].length;j++)
     {
   	  
   	   if((a[i][j]<0)&&(a[i][j]>=-9))
   	    System.out.print(d.format(a[i][j])+"   ");
   	    
   	   else if((a[i][j]<0)&&(a[i][j]>=-99)) 
   	    System.out.print(d.format(a[i][j])+"  ");
   	    
   	   else if((a[i][j]<0)&&(a[i][j]>=-999)) 
   	    System.out.print(d.format(a[i][j])+" "); 
   	    
   	   else if((a[i][j]>=0)&&(a[i][j]<=9))
   	    System.out.print(" "+d.format(a[i][j])+"   ");
   	    
   	   else if((a[i][j]>=0)&&(a[i][j]<=99))
   	    System.out.print(" "+d.format(a[i][j])+"  ");
   	   
   	   else if ((a[i][j]>=0)&&(a[i][j]<=999))
   	    System.out.print(" "+d.format(a[i][j])+" "); 
   	   	   
     }
     System.out.println(); 
    }
    
    System.out.println("--------------------------------------------------------");
 } 	
 /******************************main method*************************************************/
 
 public static void main(String arg[])	
 {
  	JPEG_Encoding j=new JPEG_Encoding();
 }
 
}

































/* {52,55,61,66,70,61,64,73},  	      
  {63,59,66,90,109,85,69,72},  	      
  {62,59,68,113,144,104,66,73},  	      
  {63,58,71,122,154,106,70,69},  	      
  {67,61,68,104,126,88,68,70},  	      
  {79,65,60,70,77,68,58,75},	      
  {85,71,64,59,55,61,65,83},
  {87,79,69,68,65,76,78,94}*/       
        
  	      
  	      
  	      
 /*{187,188,189,202,209,175,66,41},  	      
  {191,186,193,209,193,98,40,39},  	      
  {188,187,202,202,144,53,35,37},  	      
  {189,195,206,172,58,47,43,45},  	      
  {197,204,194,106,50,48,42,45},  	      
  {208,204,151,50,41,41,41,53},  	      
  {209,179,68,42,35,36,40,47},
  {200,117,53,41,31,38,39,63} 
  	      
  	      
  	      
  {52,55,61,66,70,61,64,73},  	      
  {63,59,66,90,109,85,69,72},  	      
  {62,59,68,113,144,104,66,73},  	      
  {63,58,71,122,154,106,70,69},  	      
  {67,61,68,104,126,88,68,70},  	      
  {79,65,60,70,77,63,58,75},     
  {85,71,64,59,55,61,65,83},
  {87,79,69,68,65,76,78,94}
  	      
  	      
    
  	      
  	      
  	      
 /*{"1010","00","01","100","1011","11010","111000","1111000","1111110110","1111111110000010","1111111110000011"},  	                   
  {"","1100","111001","1111001","111110110","1111111010","111111110000101","1111111110000101","1111111110000110","1111111110000111","1111111110001000"},  	                   
  {"","11011","11111000","1111110111","1111111110001001","1111111110001010","1111111110001011","1111111110001100","1111111110001101","1111111110001110","1111111110001111"},  	                   
  {"","111010","111110111","11111110111","1111111110010000","1111111110010001","1111111110010010","1111111110010011","1111111110010100","1111111110010101","1111111110010110"},  	                   
  {"","111011","1111111000","1111111110010111","1111111110011000","1111111110011001","111111111001101","1111111110011011","111111111001110","1111111110011101","1111111110011110"},  	                   
  {"","1111010","1111111001","1111111110011111","1111111110100000","1111111110100001","1111111110100010","11111111100011","1111111110100100","1111111110100101","1111111110100110"},  	                   
  {"","1111011","11111111000","1111111110100111","1111111110101000","1111111110101001","1111111110101010","1111111110101011","1111111110101100","1111111110101101","1111111110101110"},  	                   
  {"","11111001","11111111001","1111111110101111","1111111110110000","1111111110110001","1111111110110010","1111111110110011","1111111110110100","111111110110101","1111111110110110"},  	                   
  {"","11111010","111111111000000","1111111101110111","1111111110111000","1111111110111001","1111111110111010","1111111110111011","1111111110111100","1111111110111101","11111111011110"},  	                   
  {"","111111000","1111111110111111","1111111111000000","1111111111000001","1111111111000010","1111111111000011","1111111111000100","1111111111000101","1111111111000110","1111111111000111"},  	                   
  {"","111111001","1111111111001000","1111111111001001","1111111111001010","1111111111001011","1111111111001100","1111111111001101","1111111111001110","1111111111001111","1111111111010000"},  	                   
  {"","111111010","1111111111010001","1111111111010010","1111111111010011","1111111111010100","1111111111010101","1111111111010110","1111111111010111","1111111111011000","1111111111011001"},  	                   
  {"","111111010","1111111111011010","1111111111011011","1111111111011100","1111111111011101","111111111101110","1111111111011111","11111111111000000","1111111111100001","1111111111100010"},  	                   
  {"","11111111010","1111111111100011","1111111111100100","1111111111100101","1111111111100110","1111111111100111","1111111111101000","1111111111101001","1111111111101010","1111111111101011"},  	                   
  {"","111111110110","1111111111101100","1111111111101101","1111111111101110","1111111111101111","111111111110000","111111111110001","1111111111110010","1111111111110011","111111111110100"}  	                   
  {"","111111110111","1111111111110101","1111111111110110","1111111111110111","1111111111111000","1111111111111001","1111111111111010","111111111111011","111111111111100","111111111111101","1111111111111110"}*/
  	
  	      
  	                
    /* vector[0]=(int)a[0][0];        
    vector[1]=(int)a[0][1];    
    vector[2]=(int)a[1][0];
    
    ///////////////////////    
    vector[3]=(int)a[2][0];    
    vector[4]=(int)a[1][1];    
    vector[5]=(int)a[0][2]; 
    
    //////////////////////
    vector[6]=(int)a[0][3];
    vector[7]=(int)a[1][2];    
    vector[8]=(int)a[2][1];    
    vector[9]=(int)a[3][0];
    
    //////////////////////     
    vector[10]=(int)a[4][0];    
    vector[11]=(int)a[3][1];    
    vector[12]=(int)a[2][2];    
    vector[13]=(int)a[1][3];    
    vector[14]=(int)a[0][4];    
    
    ///////////////////////        
    vector[15]=(int)a[0][5];
    vector[16]=(int)a[1][4];    
    vector[17]=(int)a[2][3];    
    vector[18]=(int)a[3][2];    
    vector[19]=(int)a[4][1];    
    vector[20]=(int)a[5][0];
    
    ///////////////////////    
    vector[21]=(int)a[6][0];    
    vector[22]=(int)a[5][1];    
    vector[23]=(int)a[4][2];    
    vector[24]=(int)a[3][3];    
    vector[25]=(int)a[2][4];    
    vector[26]=(int)a[1][5];    
    vector[27]=(int)a[0][6];    
   
    
    ////////////////////// *****************   
    vector[28]=(int)a[0][7];
    vector[29]=(int)a[1][6];    
    vector[30]=(int)a[2][5];    
    vector[31]=(int)a[3][4];    
    vector[32]=(int)a[4][3];    
    vector[33]=(int)a[5][2];    
    vector[34]=(int)a[6][1];    
    vector[35]=(int)a[7][0];
    
    ///////////////////////    
    vector[36]=(int)a[7][1];    
    vector[37]=(int)a[6][2];    
    vector[38]=(int)a[5][3];    
    vector[39]=(int)a[4][4];    
    vector[40]=(int)a[3][5];    
    vector[41]=(int)a[2][6];    
    vector[42]=(int)a[1][7];
    
    ///////////////////////
    vector[43]=(int)a[2][7];    
    vector[44]=(int)a[3][6];    
    vector[45]=(int)a[4][5];    
    vector[46]=(int)a[5][4];    
    vector[47]=(int)a[6][3];    
    vector[48]=(int)a[7][2];
    
    ///////////////////////    
    vector[49]=(int)a[7][3];    
    vector[50]=(int)a[6][4];    
    vector[51]=(int)a[5][5];    
    vector[52]=(int)a[4][6];    
    vector[53]=(int)a[3][7];
    
    ///////////////////////
    vector[54]=(int)a[4][7];    
    vector[55]=(int)a[5][6];    
    vector[56]=(int)a[6][5];    
    vector[57]=(int)a[7][4];
    
    ///////////////////////    
    vector[58]=(int)a[7][5];    
    vector[59]=(int)a[6][6];    
    vector[60]=(int)a[5][7];
    
    ///////////////////////
    vector[61]=(int)a[6][7];    
    vector[62]=(int)a[7][6];
    
    //////////////////////
    vector[63]=(int)a[7][7];*/